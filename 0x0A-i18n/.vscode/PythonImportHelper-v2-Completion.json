[
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "refresh",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "0-app",
        "description": "0-app",
        "peekOfCode": "class Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n@app.route('/')\ndef index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('0-index.html')",
        "detail": "0-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "0-app",
        "description": "0-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n@app.route('/')\ndef index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`",
        "detail": "0-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "0-app",
        "description": "0-app",
        "peekOfCode": "def index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('0-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    host = getenv(\"API_HOST\", \"0.0.0.0\")",
        "detail": "0-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "0-app",
        "description": "0-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n@app.route('/')",
        "detail": "0-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "0-app",
        "description": "0-app",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n@app.route('/')\ndef index():",
        "detail": "0-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "1-app",
        "description": "1-app",
        "peekOfCode": "class Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/')\ndef index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`",
        "detail": "1-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "1-app",
        "description": "1-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/')",
        "detail": "1-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "1-app",
        "description": "1-app",
        "peekOfCode": "def index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('0-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    host = getenv(\"API_HOST\", \"0.0.0.0\")",
        "detail": "1-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "1-app",
        "description": "1-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'",
        "detail": "1-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "1-app",
        "description": "1-app",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'",
        "detail": "1-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "2-app",
        "description": "2-app",
        "peekOfCode": "class Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/')\ndef index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`",
        "detail": "2-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "2-app",
        "description": "2-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/')",
        "detail": "2-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "2-app",
        "description": "2-app",
        "peekOfCode": "def index():\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('0-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "2-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "2-app",
        "description": "2-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'",
        "detail": "2-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "2-app",
        "description": "2-app",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'].keys())\nclass Config(object):\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'",
        "detail": "2-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "3-app",
        "description": "3-app",
        "peekOfCode": "class Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/', strict_slashes=False)\ndef index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`",
        "detail": "3-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "3-app",
        "description": "3-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/', strict_slashes=False)",
        "detail": "3-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "3-app",
        "description": "3-app",
        "peekOfCode": "def index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('3-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    app.run(host='0.0.0.0', port=5000, debug=True)",
        "detail": "3-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "3-app",
        "description": "3-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'",
        "detail": "3-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "3-app",
        "description": "3-app",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'",
        "detail": "3-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "4-app",
        "description": "4-app",
        "peekOfCode": "class Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.route('/', strict_slashes=False)\ndef index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`",
        "detail": "4-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "4-app",
        "description": "4-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:\n        return request.args.get('locale')\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'",
        "detail": "4-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "4-app",
        "description": "4-app",
        "peekOfCode": "def index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('4-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    app.run(host='0.0.0.0', port=5000, debug=True)",
        "detail": "4-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "4-app",
        "description": "4-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:\n        return request.args.get('locale')\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"",
        "detail": "4-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "4-app",
        "description": "4-app",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:\n        return request.args.get('locale')\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\nclass Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']",
        "detail": "4-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "class Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.before_request\ndef before_request():\n    \"\"\"\n    > If the user is logged in, get the user object from",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:\n        return request.args.get('locale')\n    return request.accept_languages.best_match(app.config['LANGUAGES'])\ndef get_user() -> dict:\n    \"\"\"\n    If the login_as query parameter is present,\n    return the user with the corresponding id, otherwise\n    return None",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "def get_user() -> dict:\n    \"\"\"\n    If the login_as query parameter is present,\n    return the user with the corresponding id, otherwise\n    return None\n    :return: A dictionary of the user.\n    \"\"\"\n    login_as = request.args.get('login_as', False)\n    if login_as:\n        user = users[int(login_as)]",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "before_request",
        "kind": 2,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "def before_request():\n    \"\"\"\n    > If the user is logged in, get the user object from\n    the database and store it in the global\n    variable `g.user`\n    \"\"\"\n    if get_user():\n        g.user = get_user()\n@app.route('/', strict_slashes=False)\ndef index() -> str:",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "def index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('5-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    app.run(host='0.0.0.0', port=5000, debug=True)",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\nusers = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "babel = Babel(app)\nusers = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "5-app",
        "description": "5-app",
        "peekOfCode": "users = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:",
        "detail": "5-app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "class Config():\n    \"\"\" The `Config` class is a class that contains a list of languages\"\"\"\n    LANGUAGES = ['en', 'fr']\n    BABEL_DEFAULT_LOCALE = 'en'\n    BABEL_DEFAULT_TIMEZONE = 'UTC'\napp.config.from_object(Config)\n@app.before_request\ndef before_request():\n    \"\"\"\n    > If the user is logged in, get the user object from",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "def get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:\n        return request.args.get('locale')\n    if hasattr(g, \"user\") and (\n        g.user['locale'] and\n        g.user['locale'] in Config.LANGUAGES\n    ):\n        return g.user['locale']\n    return request.accept_languages.best_match(app.config['LANGUAGES'])",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "def get_user() -> dict:\n    \"\"\"\n    If the login_as query parameter is present,\n    return the user with the corresponding id, otherwise\n    return None\n    :return: A dictionary of the user.\n    \"\"\"\n    user_id = request.args.get('login_as')\n    if user_id and int(user_id) in users:\n        return users[int(user_id)]",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "before_request",
        "kind": 2,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "def before_request():\n    \"\"\"\n    > If the user is logged in, get the user object from\n    the database and store it in the global\n    variable `g.user`\n    \"\"\"\n    if get_user() is not None:\n        g.user = get_user()\n        refresh()\n@app.route('/', strict_slashes=False)",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "def index() -> str:\n    \"\"\"\n    The function `index()` returns the rendered template `index.html`\n    :return: The index.html file is being returned.\n    \"\"\"\n    return render_template('6-index.html')\nif __name__ == \"__main__\":\n    \"\"\" This is a common Python idiom to check if the file\n    is being run as a script or imported as a module.\"\"\"\n    app.run(host='0.0.0.0', port=5000, debug=True)",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "app = Flask(__name__)\nbabel = Babel(app)\nusers = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "babel = Babel(app)\nusers = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"",
        "detail": "6-app",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "6-app",
        "description": "6-app",
        "peekOfCode": "users = {\n    1: {\"name\": \"Balou\", \"locale\": \"fr\", \"timezone\": \"Europe/Paris\"},\n    2: {\"name\": \"Beyonce\", \"locale\": \"en\", \"timezone\": \"US/Central\"},\n    3: {\"name\": \"Spock\", \"locale\": \"kg\", \"timezone\": \"Vulcan\"},\n    4: {\"name\": \"Teletubby\", \"locale\": None, \"timezone\": \"Europe/London\"},\n}\n@babel.localeselector\ndef get_locale():\n    \"\"\" Locale selector. \"\"\"\n    if request.args.get('locale') in Config.LANGUAGES:",
        "detail": "6-app",
        "documentation": {}
    }
]